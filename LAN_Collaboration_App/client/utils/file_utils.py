"""\nFile utilities for LAN Collaboration App\nFile progress tracking, checksum verification, and file operations\n"""\n\nimport hashlib\nimport os\nfrom pathlib import Path\nfrom tqdm import tqdm\nimport sys\n\n# Add parent directory to path\nsys.path.append(os.path.join(os.path.dirname(__file__), '../..'))\n\nfrom shared.constants import FILE_CHUNK_SIZE, MAX_FILE_SIZE\n\n\ndef calculate_md5(file_path, chunk_size=FILE_CHUNK_SIZE, show_progress=False):\n    """Calculate MD5 checksum of a file"""\n    md5_hash = hashlib.md5()\n    file_path = Path(file_path)\n    file_size = file_path.stat().st_size\n    \n    with open(file_path, 'rb') as f:\n        if show_progress:\n            with tqdm(total=file_size, unit='B', unit_scale=True,\n                     desc="Calculating MD5", ncols=80) as pbar:\n                for chunk in iter(lambda: f.read(chunk_size), b''):\n                    md5_hash.update(chunk)\n                    pbar.update(len(chunk))\n        else:\n            for chunk in iter(lambda: f.read(chunk_size), b''):\n                md5_hash.update(chunk)\n    \n    return md5_hash.hexdigest()\n\n\ndef verify_checksum(file_path, expected_checksum):\n    """Verify file checksum"""\n    actual_checksum = calculate_md5(file_path)\n    return actual_checksum.lower() == expected_checksum.lower()\n\n\ndef format_file_size(size_bytes):\n    """Format file size in human-readable format"""\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size_bytes < 1024.0:\n            return f\"{size_bytes:.2f} {unit}\"\n        size_bytes /= 1024.0\n    return f\"{size_bytes:.2f} PB\"\n\n\nclass FileProgressTracker:\n    """Track file transfer progress"""\n    \n    def __init__(self, total_size, description=\"Transfer\"):\n        self.total_size = total_size\n        self.bytes_transferred = 0\n        self.pbar = tqdm(total=total_size, unit='B', unit_scale=True,\n                        desc=description, ncols=80)\n    \n    def update(self, bytes_count):\n        self.bytes_transferred += bytes_count\n        self.pbar.update(bytes_count)\n    \n    def close(self):\n        self.pbar.close()\n    \n    def __enter__(self):\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.close()