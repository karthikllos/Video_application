"""\nCompression utilities for LAN Collaboration App\nJPEG compression/decompression and image processing helpers\n"""\n\nimport cv2\nimport numpy as np\nfrom io import BytesIO\nfrom PIL import Image\nimport sys\nimport os\n\n# Add parent directory to path\nsys.path.append(os.path.join(os.path.dirname(__file__), '../..'))\n\nfrom shared.constants import VIDEO_QUALITY\n\n\ndef compress_frame_jpeg(frame, quality=VIDEO_QUALITY):\n    """Compress a frame (numpy array) to JPEG bytes"""\n    encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), quality]\n    result, encoded = cv2.imencode('.jpg', frame, encode_param)\n    \n    if not result:\n        raise Exception("Failed to encode frame to JPEG")\n    \n    return encoded.tobytes()\n\n\ndef decompress_frame_jpeg(jpeg_bytes):\n    """Decompress JPEG bytes to a frame (numpy array)"""\n    nparr = np.frombuffer(jpeg_bytes, np.uint8)\n    frame = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n    \n    if frame is None:\n        raise Exception("Failed to decode JPEG to frame")\n    \n    return frame\n\n\ndef compress_image_pil(image, format='JPEG', quality=VIDEO_QUALITY, optimize=True):\n    """Compress a PIL Image to bytes"""\n    buffer = BytesIO()\n    \n    if format.upper() == 'JPEG':\n        image.save(buffer, format=format, quality=quality, optimize=optimize)\n    else:\n        image.save(buffer, format=format, optimize=optimize)\n    \n    return buffer.getvalue()\n\n\ndef decompress_image_pil(image_bytes):\n    """Decompress bytes to a PIL Image"""\n    buffer = BytesIO(image_bytes)\n    image = Image.open(buffer)\n    return image