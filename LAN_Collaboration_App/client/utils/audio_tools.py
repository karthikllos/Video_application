"""\nAudio utilities for LAN Collaboration App\nPyAudio setup and audio processing helpers\n"""\n\nimport pyaudio\nimport numpy as np\nimport sys\nimport os\n\n# Add parent directory to path\nsys.path.append(os.path.join(os.path.dirname(__file__), '../..'))\n\nfrom shared.constants import AUDIO_RATE, AUDIO_CHANNELS, AUDIO_CHUNK\n\n\ndef initialize_pyaudio():\n    """Initialize PyAudio instance"""\n    return pyaudio.PyAudio()\n\n\ndef list_input_devices(p=None):\n    """List audio input devices (microphones)"""\n    should_close = False\n    if p is None:\n        p = pyaudio.PyAudio()\n        should_close = True\n    \n    devices = []\n    info = p.get_host_api_info_by_index(0)\n    num_devices = info.get('deviceCount')\n    \n    for i in range(num_devices):\n        device_info = p.get_device_info_by_host_api_device_index(0, i)\n        if device_info.get('maxInputChannels') > 0:\n            devices.append(device_info)\n    \n    if should_close:\n        p.terminate()\n    \n    return devices\n\n\ndef open_input_stream(p, rate=AUDIO_RATE, channels=AUDIO_CHANNELS, chunk=AUDIO_CHUNK):\n    """Open audio input stream"""\n    return p.open(\n        format=pyaudio.paInt16,\n        channels=channels,\n        rate=rate,\n        input=True,\n        frames_per_buffer=chunk\n    )\n\n\ndef open_output_stream(p, rate=AUDIO_RATE, channels=AUDIO_CHANNELS, chunk=AUDIO_CHUNK):\n    """Open audio output stream"""\n    return p.open(\n        format=pyaudio.paInt16,\n        channels=channels,\n        rate=rate,\n        output=True,\n        frames_per_buffer=chunk\n    )\n\n\ndef calculate_rms(audio_data):\n    """Calculate RMS (Root Mean Square) of audio data"""\n    audio_array = np.frombuffer(audio_data, dtype=np.int16)\n    rms = np.sqrt(np.mean(audio_array**2))\n    return rms