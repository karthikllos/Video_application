"""\nVideo utilities for LAN Collaboration App\nOpenCV camera operations and video processing helpers\n"""\n\nimport cv2\nimport numpy as np\nimport sys\nimport os\n\n# Add parent directory to path\nsys.path.append(os.path.join(os.path.dirname(__file__), '../..'))\n\nfrom shared.constants import VIDEO_WIDTH, VIDEO_HEIGHT, VIDEO_FPS\n\n\ndef initialize_camera(camera_index=0, width=VIDEO_WIDTH, height=VIDEO_HEIGHT, fps=VIDEO_FPS):\n    """Initialize and configure camera"""\n    cap = cv2.VideoCapture(camera_index)\n    \n    if not cap.isOpened():\n        raise Exception(f\"Failed to open camera {camera_index}\")\n    \n    cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)\n    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)\n    cap.set(cv2.CAP_PROP_FPS, fps)\n    \n    return cap\n\n\ndef capture_frame(cap):\n    """Capture a single frame from camera"""\n    ret, frame = cap.read()\n    return frame if ret else None\n\n\ndef add_text_overlay(frame, text, position=(10, 30), color=(255, 255, 255)):\n    """Add text overlay to frame"""\n    font = cv2.FONT_HERSHEY_SIMPLEX\n    cv2.putText(frame, text, position, font, 0.7, color, 2)\n    return frame\n\n\ndef flip_frame(frame, mode='horizontal'):\n    """Flip frame"""\n    if mode == 'horizontal':\n        return cv2.flip(frame, 1)\n    elif mode == 'vertical':\n        return cv2.flip(frame, 0)\n    elif mode == 'both':\n        return cv2.flip(frame, -1)\n    return frame